(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{628:function(t,e,a){"use strict";a.r(e);var r=a(7),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("Boxx"),t._v(" "),a("h1",{attrs:{id:"浏览器网络相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器网络相关"}},[t._v("#")]),t._v(" 浏览器网络相关")]),t._v(" "),a("h2",{attrs:{id:"_1-reflow-回流-和repaint-重绘-优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-reflow-回流-和repaint-重绘-优化"}},[t._v("#")]),t._v(" 1. "),a("a",{attrs:{href:"https://www.jianshu.com/p/40c6fc1d4800",target:"_blank",rel:"noopener noreferrer"}},[t._v("reflow(回流)和repaint(重绘)优化"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-332db8d0cb9a4c4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"render"}})]),t._v(" "),a("ul",[a("li",[t._v("浏览器渲染过程: DOM tree, CSS tree --\x3e Render tree --\x3e Paint")]),t._v(" "),a("li",[t._v("DOM tree根节点为html")]),t._v(" "),a("li",[t._v("渲染从浏览器左上角到右下角")]),t._v(" "),a("li",[t._v("第一次打开页面至少触发一次重绘和回流, 结构如宽高位置变化时, 触发"),a("strong",[t._v("reflow回流")]),t._v(";非结构如背景色变化时, 触发"),a("strong",[t._v("repaint重绘")]),t._v(". 二者都会造成体验不佳")]),t._v(" "),a("li",[t._v("如何减少重绘和回流?\n"),a("ul",[a("li",[t._v("通过classname或cssText一次性修改样式, 而非一个一个改")]),t._v(" "),a("li",[t._v("离线模式: 克隆要操作的结点, 操作后再与原始结点交换, 类似于虚拟DOM")]),t._v(" "),a("li",[t._v("避免频繁直接访问计算后的样式, 而是先将信息保存下来")]),t._v(" "),a("li",[t._v("绝对布局的DOM, 不会造成大量reflow")]),t._v(" "),a("li",[t._v("div不要嵌套太深, 不要超过六层")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-一个页面从输入-url-到页面加载显示完成，这个过程中都发生了什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-一个页面从输入-url-到页面加载显示完成，这个过程中都发生了什么？"}},[t._v("#")]),t._v(" 2."),a("a",{attrs:{href:"https://www.cnblogs.com/gitbo/p/6597735.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n- 服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；")]),t._v(" "),a("li",[t._v("浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM Tree）；")]),t._v(" "),a("li",[t._v("载入解析到的资源文件，渲染页面，完成。")])]),t._v(" "),a("h2",{attrs:{id:"_3-localstorage-与-sessionstorage-与cookie的区别总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-localstorage-与-sessionstorage-与cookie的区别总结"}},[t._v("#")]),t._v(" 3.localStorage 与 sessionStorage 与cookie的区别总结")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("共同点")]),t._v(": 都保存在浏览器端, 且同源")]),t._v(" "),a("li",[t._v("localStorage 与 sessionStorage 统称webStorage,保存在浏览器,不参与服务器通信,大小为5M")]),t._v(" "),a("li",[a("strong",[t._v("生命周期不同")]),t._v(": localStorage永久保存, sessionStorage当前会话, 都可手动清除")]),t._v(" "),a("li",[a("strong",[t._v("作用域不同")]),t._v(": 不同浏览器不共享local和session, 不同会话不共享session")]),t._v(" "),a("li",[a("strong",[t._v("Cookie")]),t._v(": 设置的过期时间前一直有效, 大小4K.有个数限制, 各浏览器不同, 一般为20个.携带在HTTP头中, 过多会有性能问题.可自己封装, 也可用原生")])]),t._v(" "),a("h2",{attrs:{id:"_4-浏览器如何阻止事件传播，阻止默认行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器如何阻止事件传播，阻止默认行为"}},[t._v("#")]),t._v(" 4.浏览器如何阻止事件传播，阻止默认行为")]),t._v(" "),a("ul",[a("li",[t._v("阻止事件传播(冒泡): e.stopPropagation()")]),t._v(" "),a("li",[t._v("阻止默认行为: e.preventDefault()")])]),t._v(" "),a("h2",{attrs:{id:"_5-虚拟dom方案相对原生dom操作有什么优点，实现上是什么原理？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-虚拟dom方案相对原生dom操作有什么优点，实现上是什么原理？"}},[t._v("#")]),t._v(" 5.虚拟DOM方案相对原生DOM操作有什么优点，实现上是什么原理？")]),t._v(" "),a("p",[t._v("虚拟DOM可提升性能, 无须整体重新渲染, 而是局部刷新.\nJS对象, diff算法")]),t._v(" "),a("h2",{attrs:{id:"_6-浏览器事件机制中事件触发三个阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-浏览器事件机制中事件触发三个阶段"}},[t._v("#")]),t._v(" 6.浏览器事件机制中事件触发三个阶段")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("事件捕获阶段")]),t._v(": 从dom树节点往下找到目标节点, 不会触发函数")]),t._v(" "),a("li",[a("strong",[t._v("事件目标处理函数")]),t._v(": 到达目标节点")]),t._v(" "),a("li",[a("strong",[t._v("事件冒泡")]),t._v(": 最后从目标节点往顶层元素传递, 通常函数在此阶段执行.\naddEventListener第三个参数默认false(冒泡阶段执行),true(捕获阶段执行).\n阻止冒泡见以上方法")])]),t._v(" "),a("h2",{attrs:{id:"_7-什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？"}},[t._v("#")]),t._v(" 7."),a("a",{attrs:{href:"https://segmentfault.com/a/1190000011145364",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("跨域是指一个域下的文档或脚本试图去请求另一个域下的资源")]),t._v(" "),a("li",[t._v("防止XSS、CSFR等攻击, 协议+域名+端口不同")]),t._v(" "),a("li",[t._v("jsonp; 跨域资源共享（CORS）(Access control); 服务器正向代理等\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-9505d1ec2550649f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"jsonp封装"}})]),t._v(" "),a("li",[a("strong",[t._v("预检请求")]),t._v(': 需预检的请求要求必须首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。"预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响')])]),t._v(" "),a("h2",{attrs:{id:"_8-了解浏览器缓存机制吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-了解浏览器缓存机制吗？"}},[t._v("#")]),t._v(" 8."),a("a",{attrs:{href:"https://www.jianshu.com/p/8b4f3f7bf823",target:"_blank",rel:"noopener noreferrer"}},[t._v("了解浏览器缓存机制吗？"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("浏览器缓存就是把一个已经请求过的资源拷贝一份存储起来，当下次需要该资源时，浏览器会根据缓存机制决定直接使用缓存资源还是再次向服务器发送请求.")]),t._v(" "),a("li",[t._v("作用: 减少网络传输的损耗以及降低服务器压力。")]),t._v(" "),a("li",[t._v("缓存位置优先级：Service Worker > Memory Cache > Disk Cache > Push Cache. 都没有命中，就会向服务器发请求")]),t._v(" "),a("li",[t._v("策略优先级: 强制缓存 > 协商缓存; cache-control > Expires > Etag > Last-modified")])]),t._v(" "),a("h2",{attrs:{id:"_9-为什么操作-dom-慢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-为什么操作-dom-慢"}},[t._v("#")]),t._v(" 9.为什么操作 DOM 慢?")]),t._v(" "),a("p",[t._v("DOM本身是一个js对象, 操作这个对象本身不慢, 但是操作后触发了浏览器的行为, 如repaint和reflow等浏览器行为, 使其变慢")]),t._v(" "),a("h2",{attrs:{id:"_10-什么情况会阻塞渲染？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-什么情况会阻塞渲染？"}},[t._v("#")]),t._v(" 10.什么情况会阻塞渲染？")]),t._v(" "),a("ul",[a("li",[t._v("js脚本同步执行")]),t._v(" "),a("li",[t._v("css和图片虽然是异步加载, 但js文件执行需依赖css, 所以css也会阻塞渲染")])]),t._v(" "),a("h2",{attrs:{id:"_11-如何判断js运行在浏览器中还是node中？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-如何判断js运行在浏览器中还是node中？"}},[t._v("#")]),t._v(" 11.如何判断js运行在浏览器中还是node中？")]),t._v(" "),a("p",[t._v("判断有无全局对象global和window")]),t._v(" "),a("h2",{attrs:{id:"_12-关于web以及浏览器处理预加载有哪些思考？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-关于web以及浏览器处理预加载有哪些思考？"}},[t._v("#")]),t._v(" 12.关于web以及浏览器处理预加载有哪些思考？")]),t._v(" "),a("p",[t._v("图片等静态资源在使用之前就提前请求\n资源使用到的时候能从缓存中加载, 提升用户体验\n页面展示的依赖关系维护")]),t._v(" "),a("h2",{attrs:{id:"_13-http多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-http多路复用"}},[t._v("#")]),t._v(" 13."),a("a",{attrs:{href:"https://segmentfault.com/a/1190000011172823",target:"_blank",rel:"noopener noreferrer"}},[t._v("http多路复用"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Keep-Alive")]),t._v(": Keep-Alive解决的核心问题：一定时间内，同一域名多次请求数据，只建立一次HTTP请求，其他请求可复用每一次建立的连接通道，以达到提高请求效率的问题。这里面所说的一定时间是可以配置的，不管你用的是Apache还是nginx。")]),t._v(" "),a("li",[t._v("解决两个问题: 串行文件传输(采用二进制数据帧); 连接数过多(采用流, 并行传输)")])]),t._v(" "),a("h2",{attrs:{id:"_14-http和https："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-http和https："}},[t._v("#")]),t._v(" 14. "),a("a",{attrs:{href:"https://www.cnblogs.com/wqhwe/p/5407468.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http和https："),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("http: 最广泛网络协议，BS模型，浏览器高效。")]),t._v(" "),a("li",[t._v("https: 安全版，通过SSL加密，加密传输，身份认证，密钥")])]),t._v(" "),a("ol",[a("li",[t._v("https相对于http加入了ssl层, 加密传输, 身份认证;")]),t._v(" "),a("li",[t._v("需要到ca申请收费的证书;")]),t._v(" "),a("li",[t._v("安全但是耗时多，缓存不是很好;")]),t._v(" "),a("li",[t._v("注意兼容http和https;")]),t._v(" "),a("li",[t._v("连接方式不同, 端口号也不同, http是80, https是443")])]),t._v(" "),a("h2",{attrs:{id:"_15-csrf和xss区别及防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-csrf和xss区别及防御"}},[t._v("#")]),t._v(" 15.  "),a("a",{attrs:{href:"https://blog.csdn.net/m0_37631322/article/details/81346335",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSRF和XSS区别及防御"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_16-cookie可设置哪些属性？httponly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-cookie可设置哪些属性？httponly"}},[t._v("#")]),t._v(" 16. cookie可设置哪些属性？httponly?")]),t._v(" "),a("p",[t._v("chrome控制台的application下可查看:\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-01018453748f43b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"cookie"}})]),t._v(" "),a("ul",[a("li",[t._v("name　　字段为一个cookie的名称。")]),t._v(" "),a("li",[t._v("value　　字段为一个cookie的值。")]),t._v(" "),a("li",[t._v("domain　　字段为可以访问此cookie的域名。")]),t._v(" "),a("li",[t._v("path　　字段为可以访问此cookie的页面路径。 比如domain是abc.com,path是/test，那么只有/test路径下的页面可以读取此cookie。")]),t._v(" "),a("li",[t._v("expires/Max-Age 　　字段为此cookie超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。")]),t._v(" "),a("li",[t._v("Size　　字段 此cookie大小。")]),t._v(" "),a("li",[t._v("http　　字段  cookie的httponly属性。若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。")]),t._v(" "),a("li",[t._v("secure　　 字段 设置是否只能通过https来传递此条cookie")])]),t._v(" "),a("h2",{attrs:{id:"_17-登录后，前端做了哪些工作，如何得知已登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-登录后，前端做了哪些工作，如何得知已登录"}},[t._v("#")]),t._v(" 17. 登录后，前端做了哪些工作，如何得知已登录")]),t._v(" "),a("ul",[a("li",[t._v("前端存放服务端下发的cookie, 简单说就是写一个字段在cookie中表明已登录, 并设置失效日期")]),t._v(" "),a("li",[t._v("或使用后端返回的token, 每次ajax请求将token携带在请求头中, 这也是防范csrf的手段之一")])]),t._v(" "),a("h2",{attrs:{id:"_18-http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-http状态码"}},[t._v("#")]),t._v(" 18. "),a("a",{attrs:{href:"https://www.runoob.com/http/http-status-codes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http状态码"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("1**: 服务器收到请求, 需请求者进一步操作")]),t._v(" "),a("li",[t._v("2**: 请求成功")]),t._v(" "),a("li",[t._v("3**: 重定向, 资源被转移到其他URL了")]),t._v(" "),a("li",[t._v("4**: 客户端错误, 请求语法错误或没有找到相应资源")]),t._v(" "),a("li",[t._v("5**: 服务端错误, server error")]),t._v(" "),a("li",[t._v("301: 资源(网页等)被永久转移到其他URL, 返回值中包含新的URL, 浏览器会自动定向到新URL")]),t._v(" "),a("li",[t._v("302: 临时转移. 客户端应访问原有URL")]),t._v(" "),a("li",[t._v("304: Not Modified. 指定日期后未修改, 不返回资源")]),t._v(" "),a("li",[t._v("403: 服务器拒绝执行请求")]),t._v(" "),a("li",[t._v("404: 请求的资源(网页等)不存在")]),t._v(" "),a("li",[t._v("500: 内部服务器错误")])]),t._v(" "),a("h2",{attrs:{id:"_19-http请求头缓存设置方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-http请求头缓存设置方法"}},[t._v("#")]),t._v(" 19.  "),a("a",{attrs:{href:"https://www.cnblogs.com/zhaow/p/7832829.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Http请求头缓存设置方法"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Cache-control, expire, last-modify")]),t._v(" "),a("h2",{attrs:{id:"_20-实现页面回退刷新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-实现页面回退刷新"}},[t._v("#")]),t._v(" 20. 实现页面回退刷新")]),t._v(" "),a("ul",[a("li",[t._v("旧: window.history.back() + window.location.href=document.referrer;")]),t._v(" "),a("li",[t._v("新: HTML5的新API扩展了window.history，使历史记录点更加开放了。可以存储当前历史记录点、替换当前历史记录点、监听历史记录点onpopstate, replaceState")])]),t._v(" "),a("h2",{attrs:{id:"_21-正向代理和反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-正向代理和反向代理"}},[t._v("#")]),t._v(" 21. "),a("a",{attrs:{href:"https://www.cnblogs.com/Anker/p/6056540.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("正向代理和反向代理"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("正向代理:\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-b63e408b48418647.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"正向代理"}}),t._v("\n（1）访问原来无法访问的资源，如google\n（2） 可以做缓存，加速访问资源\n（3）对客户端访问授权，上网进行认证\n（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息")]),t._v(" "),a("li",[t._v("反向代理: "),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-78b27e56002ff0ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"反向代理"}}),t._v("\n（1）保证内网的安全，可以使用反向代理提供WAF功能，阻止web攻击大型网站，通常将反向代理作为公网访问地址，Web服务器是内网。\n（2）负载均衡，通过反向代理服务器来优化网站的负载")])]),t._v(" "),a("h2",{attrs:{id:"_22-关于预检请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-关于预检请求"}},[t._v("#")]),t._v(" 22. "),a("a",{attrs:{href:"https://www.jianshu.com/p/3a10ac906fd0",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于预检请求"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("在非简单请求且跨域的情况下，浏览器会自动发起options预检请求。")]),t._v(" "),a("h2",{attrs:{id:"_23-三次握手四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-三次握手四次挥手"}},[t._v("#")]),t._v(" 23. "),a("a",{attrs:{href:"https://www.jianshu.com/p/ad0904df7d76",target:"_blank",rel:"noopener noreferrer"}},[t._v("三次握手四次挥手"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("开启连接用三次握手, 关闭用四次挥手")])]),t._v(" "),a("h2",{attrs:{id:"_24-tcp和udp协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-tcp和udp协议"}},[t._v("#")]),t._v(" 24. TCP和UDP协议")]),t._v(" "),a("ul",[a("li",[t._v("TCP（Transmission Control Protocol：传输控制协议；面向连接，可靠传输")]),t._v(" "),a("li",[t._v("UDP（User Datagram Protocol）：用户数据报协议；面向无连接，不可靠传输")])]),t._v(" "),a("h2",{attrs:{id:"_25-进程和线程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-进程和线程的区别"}},[t._v("#")]),t._v(" 25. "),a("a",{attrs:{href:"https://www.cnblogs.com/zhuzhu2016/p/5804875.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程和线程的区别"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("进程：是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。")]),t._v(" "),a("li",[t._v("线程：是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。")]),t._v(" "),a("li",[t._v("一个程序至少一个进程，一个进程至少一个线程。")])]),t._v(" "),a("h1",{attrs:{id:"插件及工具相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件及工具相关"}},[t._v("#")]),t._v(" 插件及工具相关")]),t._v(" "),a("h2",{attrs:{id:"_1-babel和polyfill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-babel和polyfill"}},[t._v("#")]),t._v(" 1. "),a("a",{attrs:{href:"http://www.cnblogs.com/zhansu/p/8305081.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("babel和polyfill"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Babel")]),t._v(": Babel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码。注意：Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API")]),t._v(" "),a("li",[a("code",[t._v("Polyfill")]),t._v(": Polyfill的准确意思为，用于实现浏览器并不支持的原生API的代码。")])]),t._v(" "),a("h2",{attrs:{id:"_2-jpg-jpeg和png区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-jpg-jpeg和png区别"}},[t._v("#")]),t._v(" 2. jpg, jpeg和png区别")]),t._v(" "),a("ul",[a("li",[t._v("jpg是jpeg的缩写, 二者一致")]),t._v(" "),a("li",[t._v("PNG就是为取代GIF而生的, 无损压缩, 占用内存多")]),t._v(" "),a("li",[t._v("jpg牺牲图片质量, 有损, 占用内存小")]),t._v(" "),a("li",[t._v("PNG格式可编辑。如图片中有字体等，可利用PS再做更改。JPG格式不可编辑")])]),t._v(" "),a("h2",{attrs:{id:"_3-git-rebase和merge区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-rebase和merge区别"}},[t._v("#")]),t._v(" 3. "),a("a",{attrs:{href:"https://www.jianshu.com/p/4079284dd970",target:"_blank",rel:"noopener noreferrer"}},[t._v("git rebase和merge区别"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-10c938ef31a111d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"git rebase"}}),t._v(" "),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13102777-d26dc5206211eef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"git merge"}})]),t._v(" "),a("h1",{attrs:{id:"前端性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化"}},[t._v("#")]),t._v(" 前端性能优化")]),t._v(" "),a("ol",[a("li",[t._v("减少HTTP请求（合并css、js，雪碧图/base64图片）")]),t._v(" "),a("li",[t._v("压缩（css、js、图片皆可压缩,使用webpack uglify和 svg）")]),t._v(" "),a("li",[t._v("样式表放头部，脚本放底部")]),t._v(" "),a("li",[t._v("使用CDN（这部分，不少前端都不用考虑，负责发布的兄弟可能会负责搞好）")]),t._v(" "),a("li",[t._v("http缓存")]),t._v(" "),a("li",[t._v("bosify图片压缩: 根据具体情况修改图片后缀或格式  后端根据格式来判断存储原图还是缩略图")]),t._v(" "),a("li",[t._v("懒加载, 预加载")]),t._v(" "),a("li",[t._v("替代方案: 骨架屏, SSR")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000015883378?utm_source=tag-newest",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack优化"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"原生通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原生通信"}},[t._v("#")]),t._v(" 原生通信")]),t._v(" "),a("h3",{attrs:{id:"_1-jsbridge通信原理-有哪几种实现的方式？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-jsbridge通信原理-有哪几种实现的方式？"}},[t._v("#")]),t._v(" 1."),a("a",{attrs:{href:"https://blog.csdn.net/u014021258/article/details/81129702",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSBridge通信原理, 有哪几种实现的方式？"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("JsBridge给JavaScript提供了调用Native功能，Native也能够操控JavaScript。这样前端部分就可以方便使用地理位置、摄像头以及登录支付等Native能力啦。JSBridge构建 Native和非Native间消息通信的通道，而且是 双向通信的通道。")]),t._v(" "),a("ul",[a("li",[t._v("JS 向 Native 发送消息 : 调用相关功能、通知 Native 当前 JS 的相关状态等。")]),t._v(" "),a("li",[t._v("Native 向 JS 发送消息 : 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等。")])]),t._v(" "),a("p",[t._v("2.实现一个简单的 JSBridge，设计思路？")])],1)}),[],!1,null,null,null);e.default=_.exports}}]);